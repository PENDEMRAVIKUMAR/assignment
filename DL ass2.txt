import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv1D, MaxPooling1D, Flatten, Dense
from tensorflow.keras.utils import to_categorical

# Sample DNA sequences and labels (for illustration)
data = {
    'sequence': ['ATGCATGCATGC', 'ATGCATGCATGC', 'GCGCGCGCGCG', 'TATATATATA', 'ATGCATGCATGC'],
    'label': [0, 1, 0, 1, 0]  # 0 = non-disease, 1 = disease
}

df = pd.DataFrame(data)

# One-hot encode the DNA sequences
def one_hot_encode(sequence):
    encoding = {'A': [1, 0, 0, 0], 'T': [0, 1, 0, 0], 'G': [0, 0, 1, 0], 'C': [0, 0, 0, 1]}
    return np.array([encoding[base] for base in sequence])

# Apply one-hot encoding to all sequences
X = np.array([one_hot_encode(seq) for seq in df['sequence']])
X = np.array([x.flatten() for x in X])  # Flatten to make it a 1D array per sequence

# Convert labels to categorical (for classification)
y = to_categorical(df['label'], num_classes=2)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build the CNN model
model = Sequential()
model.add(Conv1D(64, 3, activation='relu', input_shape=(X_train.shape[1], 1)))
model.add(MaxPooling1D(2))
model.add(Flatten())
model.add(Dense(64, activation='relu'))
model.add(Dense(2, activation='softmax'))  # 2 classes: disease vs non-disease

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Reshape input data for the CNN
X_train = X_train[..., np.newaxis]
X_test = X_test[..., np.newaxis]

# Train the model
history = model.fit(X_train, y_train, epochs=10, batch_size=2, validation_data=(X_test, y_test))

# Evaluate the model on the test set
test_loss, test_acc = model.evaluate(X_test, y_test)
print(f'Test Accuracy: {test_acc}')
